{
  "algorithmName": "Binary Search",
  "description": "Binary Search is an efficient search algorithm used to find a target value within a sorted collection of elements. It is akin to locating a word in a dictionary by repeatedly dividing the search space in half.\nIn this algorithm, the search begins by comparing the target value with the middle element of the sorted collection. If the target matches the middle element, the search is successful. If the target is less than the middle element, the search continues in the lower half of the collection; otherwise, it continues in the upper half. This process is repeated recursively until the target is found or the search space is exhausted.\nBinary Search is highly efficient, especially for large datasets, due to its logarithmic time complexity. It divides the search space in half with each comparison, resulting in a time complexity of O(log n), where n is the number of elements in the collection.\nHowever, it requires the collection to be sorted beforehand, which can be an additional overhead. Additionally, its implementation is more complex compared to linear search. Despite these drawbacks, Binary Search is widely used in scenarios where quick search operations are essential, such as in sorted arrays or lists.",
 "averageComplexity": "O(log n)",
  "bestCase": "O(1)",
  "worstCase": "O(log n)",
  "spaceComplexity": "O(1)"
}
