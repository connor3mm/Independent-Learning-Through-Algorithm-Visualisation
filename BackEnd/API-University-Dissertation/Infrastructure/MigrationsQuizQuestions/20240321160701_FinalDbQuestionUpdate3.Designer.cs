// <auto-generated />
using System;
using API_University_Dissertation.Core.Data.DataContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace API_University_Dissertation.MigrationsQuizQuestions
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240321160701_FinalDbQuestionUpdate3")]
    partial class FinalDbQuestionUpdate3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0-rc.2.23480.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("API_University_Dissertation.Core.Data.Entities.ProficiencyLevel", b =>
                {
                    b.Property<int>("LevelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("LevelId"));

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("LevelId");

                    b.ToTable("ProficiencyLevels");

                    b.HasData(
                        new
                        {
                            LevelId = 1,
                            LevelName = "Undetermined"
                        },
                        new
                        {
                            LevelId = 2,
                            LevelName = "Beginner"
                        },
                        new
                        {
                            LevelId = 3,
                            LevelName = "Intermediate"
                        },
                        new
                        {
                            LevelId = 4,
                            LevelName = "Advanced"
                        },
                        new
                        {
                            LevelId = 5,
                            LevelName = "Expert"
                        });
                });

            modelBuilder.Entity("API_University_Dissertation.Core.Data.Entities.QuestionChoices", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Choice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionChoices");

                    b.HasData(
                        new
                        {
                            ID = 1,
                            Choice = "O(n)",
                            IsCorrect = true,
                            QuestionId = 1
                        },
                        new
                        {
                            ID = 2,
                            Choice = "O(1)",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            ID = 3,
                            Choice = "O(n^2)",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            ID = 4,
                            Choice = "O(n x log n)",
                            IsCorrect = false,
                            QuestionId = 1
                        },
                        new
                        {
                            ID = 5,
                            Choice = "O(n^2)",
                            IsCorrect = true,
                            QuestionId = 2
                        },
                        new
                        {
                            ID = 6,
                            Choice = "O(1)",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            ID = 7,
                            Choice = "O(n x log n)",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            ID = 8,
                            Choice = "O(n)",
                            IsCorrect = false,
                            QuestionId = 2
                        },
                        new
                        {
                            ID = 9,
                            Choice = "O(1)",
                            IsCorrect = true,
                            QuestionId = 3
                        },
                        new
                        {
                            ID = 10,
                            Choice = "O(n^2)",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            ID = 11,
                            Choice = "O(n x log n)",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            ID = 12,
                            Choice = "O(n)",
                            IsCorrect = false,
                            QuestionId = 3
                        },
                        new
                        {
                            ID = 13,
                            Choice = "O(n^2)",
                            IsCorrect = true,
                            QuestionId = 4
                        },
                        new
                        {
                            ID = 14,
                            Choice = "O(1)",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            ID = 15,
                            Choice = "O(n x log n)",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            ID = 16,
                            Choice = "O(n)",
                            IsCorrect = false,
                            QuestionId = 4
                        },
                        new
                        {
                            ID = 17,
                            Choice = "O(n)",
                            IsCorrect = true,
                            QuestionId = 5
                        },
                        new
                        {
                            ID = 18,
                            Choice = "O(1)",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            ID = 19,
                            Choice = "O(n^2)",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            ID = 20,
                            Choice = "O(n x log n)",
                            IsCorrect = false,
                            QuestionId = 5
                        },
                        new
                        {
                            ID = 21,
                            Choice = "O(1)",
                            IsCorrect = true,
                            QuestionId = 6
                        },
                        new
                        {
                            ID = 22,
                            Choice = "O(n^2)",
                            IsCorrect = false,
                            QuestionId = 6
                        },
                        new
                        {
                            ID = 23,
                            Choice = "O(n x log n)",
                            IsCorrect = false,
                            QuestionId = 6
                        },
                        new
                        {
                            ID = 24,
                            Choice = "O(n)",
                            IsCorrect = false,
                            QuestionId = 6
                        },
                        new
                        {
                            ID = 25,
                            Choice = "O(n^2)",
                            IsCorrect = false,
                            QuestionId = 7
                        },
                        new
                        {
                            ID = 26,
                            Choice = "O(1)",
                            IsCorrect = false,
                            QuestionId = 7
                        },
                        new
                        {
                            ID = 27,
                            Choice = "O(n x log n)",
                            IsCorrect = false,
                            QuestionId = 7
                        },
                        new
                        {
                            ID = 28,
                            Choice = "O(n^2)",
                            IsCorrect = true,
                            QuestionId = 8
                        },
                        new
                        {
                            ID = 29,
                            Choice = "O(1)",
                            IsCorrect = false,
                            QuestionId = 8
                        },
                        new
                        {
                            ID = 30,
                            Choice = "O(n x log n)",
                            IsCorrect = false,
                            QuestionId = 8
                        },
                        new
                        {
                            ID = 31,
                            Choice = "O(n)",
                            IsCorrect = false,
                            QuestionId = 8
                        },
                        new
                        {
                            ID = 32,
                            Choice = "O(1)",
                            IsCorrect = true,
                            QuestionId = 9
                        },
                        new
                        {
                            ID = 33,
                            Choice = "O(n^2)",
                            IsCorrect = false,
                            QuestionId = 9
                        },
                        new
                        {
                            ID = 34,
                            Choice = "O(n x log n)",
                            IsCorrect = false,
                            QuestionId = 9
                        },
                        new
                        {
                            ID = 35,
                            Choice = "O(n)",
                            IsCorrect = false,
                            QuestionId = 9
                        },
                        new
                        {
                            ID = 36,
                            Choice = "O(n x log n)",
                            IsCorrect = true,
                            QuestionId = 10
                        },
                        new
                        {
                            ID = 37,
                            Choice = "O(n)",
                            IsCorrect = false,
                            QuestionId = 10
                        },
                        new
                        {
                            ID = 38,
                            Choice = "O(n^2)",
                            IsCorrect = false,
                            QuestionId = 10
                        },
                        new
                        {
                            ID = 39,
                            Choice = "O(1)",
                            IsCorrect = false,
                            QuestionId = 10
                        },
                        new
                        {
                            ID = 40,
                            Choice = "O(n x log n)",
                            IsCorrect = true,
                            QuestionId = 11
                        },
                        new
                        {
                            ID = 41,
                            Choice = "O(n^2)",
                            IsCorrect = false,
                            QuestionId = 11
                        },
                        new
                        {
                            ID = 42,
                            Choice = "O(n)",
                            IsCorrect = false,
                            QuestionId = 11
                        },
                        new
                        {
                            ID = 43,
                            Choice = "O(1)",
                            IsCorrect = false,
                            QuestionId = 11
                        },
                        new
                        {
                            ID = 44,
                            Choice = "O(n x log n)",
                            IsCorrect = false,
                            QuestionId = 12
                        },
                        new
                        {
                            ID = 45,
                            Choice = "O(n^2)",
                            IsCorrect = false,
                            QuestionId = 12
                        },
                        new
                        {
                            ID = 46,
                            Choice = "O(1)",
                            IsCorrect = false,
                            QuestionId = 12
                        },
                        new
                        {
                            ID = 47,
                            Choice = "O(n)",
                            IsCorrect = true,
                            QuestionId = 12
                        },
                        new
                        {
                            ID = 48,
                            Choice = "O(n x log n)",
                            IsCorrect = true,
                            QuestionId = 13
                        },
                        new
                        {
                            ID = 49,
                            Choice = "O(n^2)",
                            IsCorrect = false,
                            QuestionId = 13
                        },
                        new
                        {
                            ID = 50,
                            Choice = "O(n)",
                            IsCorrect = false,
                            QuestionId = 13
                        },
                        new
                        {
                            ID = 51,
                            Choice = "O(1)",
                            IsCorrect = false,
                            QuestionId = 13
                        },
                        new
                        {
                            ID = 52,
                            Choice = "O(n^2)",
                            IsCorrect = true,
                            QuestionId = 14
                        },
                        new
                        {
                            ID = 53,
                            Choice = "O(n x log n)",
                            IsCorrect = false,
                            QuestionId = 14
                        },
                        new
                        {
                            ID = 54,
                            Choice = "O(n)",
                            IsCorrect = false,
                            QuestionId = 14
                        },
                        new
                        {
                            ID = 55,
                            Choice = "O(1)",
                            IsCorrect = false,
                            QuestionId = 14
                        },
                        new
                        {
                            ID = 56,
                            Choice = "O(n)",
                            IsCorrect = true,
                            QuestionId = 15
                        },
                        new
                        {
                            ID = 57,
                            Choice = "O(n^2)",
                            IsCorrect = false,
                            QuestionId = 15
                        },
                        new
                        {
                            ID = 58,
                            Choice = "O(1)",
                            IsCorrect = false,
                            QuestionId = 15
                        },
                        new
                        {
                            ID = 59,
                            Choice = "O(n x log n)",
                            IsCorrect = false,
                            QuestionId = 15
                        },
                        new
                        {
                            ID = 60,
                            Choice = "O(n^2)",
                            IsCorrect = false,
                            QuestionId = 16
                        },
                        new
                        {
                            ID = 61,
                            Choice = "O(1)",
                            IsCorrect = false,
                            QuestionId = 16
                        },
                        new
                        {
                            ID = 62,
                            Choice = "O(n x log n)",
                            IsCorrect = true,
                            QuestionId = 16
                        },
                        new
                        {
                            ID = 63,
                            Choice = "O(n)",
                            IsCorrect = false,
                            QuestionId = 16
                        },
                        new
                        {
                            ID = 64,
                            Choice = "O(n^2)",
                            IsCorrect = true,
                            QuestionId = 17
                        },
                        new
                        {
                            ID = 65,
                            Choice = "O(1)",
                            IsCorrect = false,
                            QuestionId = 17
                        },
                        new
                        {
                            ID = 66,
                            Choice = "O(n x log n)",
                            IsCorrect = false,
                            QuestionId = 17
                        },
                        new
                        {
                            ID = 67,
                            Choice = "O(n)",
                            IsCorrect = false,
                            QuestionId = 17
                        },
                        new
                        {
                            ID = 68,
                            Choice = "O(n^2)",
                            IsCorrect = false,
                            QuestionId = 18
                        },
                        new
                        {
                            ID = 69,
                            Choice = "O(1)",
                            IsCorrect = true,
                            QuestionId = 18
                        },
                        new
                        {
                            ID = 70,
                            Choice = "O(n x log n)",
                            IsCorrect = false,
                            QuestionId = 18
                        },
                        new
                        {
                            ID = 71,
                            Choice = "O(n)",
                            IsCorrect = false,
                            QuestionId = 18
                        },
                        new
                        {
                            ID = 72,
                            Choice = "O(n)",
                            IsCorrect = true,
                            QuestionId = 7
                        },
                        new
                        {
                            ID = 73,
                            Choice = "Elements moving to the bottom of the array",
                            IsCorrect = false,
                            QuestionId = 19
                        },
                        new
                        {
                            ID = 74,
                            Choice = "Elements moving to the top of the array",
                            IsCorrect = true,
                            QuestionId = 19
                        },
                        new
                        {
                            ID = 75,
                            Choice = "Elements remaining stationary",
                            IsCorrect = false,
                            QuestionId = 19
                        },
                        new
                        {
                            ID = 76,
                            Choice = "Elements being randomly rearranged",
                            IsCorrect = false,
                            QuestionId = 19
                        },
                        new
                        {
                            ID = 77,
                            Choice = "It requires additional memory",
                            IsCorrect = false,
                            QuestionId = 20
                        },
                        new
                        {
                            ID = 78,
                            Choice = "It has a high space complexity",
                            IsCorrect = false,
                            QuestionId = 20
                        },
                        new
                        {
                            ID = 79,
                            Choice = "Its time complexity is not well-defined",
                            IsCorrect = false,
                            QuestionId = 20
                        },
                        new
                        {
                            ID = 80,
                            Choice = "Its quadratic time complexity makes it inefficient for large data structures",
                            IsCorrect = true,
                            QuestionId = 20
                        },
                        new
                        {
                            ID = 81,
                            Choice = "Quick Sort",
                            IsCorrect = false,
                            QuestionId = 21
                        },
                        new
                        {
                            ID = 82,
                            Choice = "Merge Sort",
                            IsCorrect = false,
                            QuestionId = 21
                        },
                        new
                        {
                            ID = 83,
                            Choice = "Heap Sort",
                            IsCorrect = true,
                            QuestionId = 21
                        },
                        new
                        {
                            ID = 84,
                            Choice = "Insertion Sort",
                            IsCorrect = false,
                            QuestionId = 21
                        },
                        new
                        {
                            ID = 85,
                            Choice = "Unsorted subsequences are combined into a single sorted sublist",
                            IsCorrect = true,
                            QuestionId = 22
                        },
                        new
                        {
                            ID = 86,
                            Choice = "Elements are divided into smaller sublists recursively",
                            IsCorrect = false,
                            QuestionId = 22
                        },
                        new
                        {
                            ID = 87,
                            Choice = "Adjacent elements are compared and swapped if necessary",
                            IsCorrect = false,
                            QuestionId = 22
                        },
                        new
                        {
                            ID = 88,
                            Choice = "The largest element is selected and appended to the sorted sublist",
                            IsCorrect = false,
                            QuestionId = 22
                        },
                        new
                        {
                            ID = 89,
                            Choice = "Divide and conquer",
                            IsCorrect = true,
                            QuestionId = 23
                        },
                        new
                        {
                            ID = 90,
                            Choice = "Greedy algorithm",
                            IsCorrect = false,
                            QuestionId = 23
                        },
                        new
                        {
                            ID = 91,
                            Choice = "Dynamic programming",
                            IsCorrect = false,
                            QuestionId = 23
                        },
                        new
                        {
                            ID = 92,
                            Choice = "Backtracking",
                            IsCorrect = false,
                            QuestionId = 23
                        },
                        new
                        {
                            ID = 93,
                            Choice = "Bubble Sort",
                            IsCorrect = false,
                            QuestionId = 24
                        },
                        new
                        {
                            ID = 94,
                            Choice = "Merge Sort",
                            IsCorrect = false,
                            QuestionId = 24
                        },
                        new
                        {
                            ID = 95,
                            Choice = "Insertion Sort",
                            IsCorrect = true,
                            QuestionId = 24
                        },
                        new
                        {
                            ID = 96,
                            Choice = "Quick Sort",
                            IsCorrect = false,
                            QuestionId = 24
                        },
                        new
                        {
                            ID = 97,
                            Choice = "To increase memory usage",
                            IsCorrect = false,
                            QuestionId = 25
                        },
                        new
                        {
                            ID = 98,
                            Choice = "To decrease time complexity",
                            IsCorrect = false,
                            QuestionId = 25
                        },
                        new
                        {
                            ID = 99,
                            Choice = "To avoid the limitations of comparing only adjacent elements",
                            IsCorrect = true,
                            QuestionId = 25
                        },
                        new
                        {
                            ID = 100,
                            Choice = "To increase the number of comparisons",
                            IsCorrect = false,
                            QuestionId = 25
                        },
                        new
                        {
                            ID = 101,
                            Choice = "Linear Search",
                            IsCorrect = false,
                            QuestionId = 26
                        },
                        new
                        {
                            ID = 102,
                            Choice = "Binary Search",
                            IsCorrect = true,
                            QuestionId = 26
                        },
                        new
                        {
                            ID = 103,
                            Choice = "Depth-First Search",
                            IsCorrect = false,
                            QuestionId = 26
                        },
                        new
                        {
                            ID = 104,
                            Choice = "Breadth-First Search",
                            IsCorrect = false,
                            QuestionId = 26
                        },
                        new
                        {
                            ID = 105,
                            Choice = "Array",
                            IsCorrect = true,
                            QuestionId = 27
                        },
                        new
                        {
                            ID = 106,
                            Choice = "Linked List",
                            IsCorrect = false,
                            QuestionId = 27
                        },
                        new
                        {
                            ID = 107,
                            Choice = "Hash Table",
                            IsCorrect = false,
                            QuestionId = 27
                        },
                        new
                        {
                            ID = 108,
                            Choice = "Stack",
                            IsCorrect = false,
                            QuestionId = 27
                        },
                        new
                        {
                            ID = 109,
                            Choice = "Linear Search",
                            IsCorrect = false,
                            QuestionId = 28
                        },
                        new
                        {
                            ID = 110,
                            Choice = "Binary Search",
                            IsCorrect = true,
                            QuestionId = 28
                        },
                        new
                        {
                            ID = 111,
                            Choice = "Interpolation Search",
                            IsCorrect = false,
                            QuestionId = 28
                        },
                        new
                        {
                            ID = 112,
                            Choice = "Depth-First Search",
                            IsCorrect = false,
                            QuestionId = 28
                        },
                        new
                        {
                            ID = 113,
                            Choice = "Binary search is easier to implement",
                            IsCorrect = false,
                            QuestionId = 29
                        },
                        new
                        {
                            ID = 114,
                            Choice = "Binary search works efficiently on unsorted arrays",
                            IsCorrect = false,
                            QuestionId = 29
                        },
                        new
                        {
                            ID = 115,
                            Choice = "Binary search has a lower time complexity",
                            IsCorrect = true,
                            QuestionId = 29
                        },
                        new
                        {
                            ID = 116,
                            Choice = "Binary search requires less memory.",
                            IsCorrect = false,
                            QuestionId = 29
                        },
                        new
                        {
                            ID = 117,
                            Choice = "When the array is sorted in descending order",
                            IsCorrect = false,
                            QuestionId = 30
                        },
                        new
                        {
                            ID = 118,
                            Choice = "When the array is extremely large",
                            IsCorrect = false,
                            QuestionId = 30
                        },
                        new
                        {
                            ID = 119,
                            Choice = "When the array is unsorted and has a small number of elements",
                            IsCorrect = true,
                            QuestionId = 30
                        },
                        new
                        {
                            ID = 120,
                            Choice = "When the array is sparse",
                            IsCorrect = false,
                            QuestionId = 30
                        },
                        new
                        {
                            ID = 121,
                            Choice = "True",
                            IsCorrect = false,
                            QuestionId = 31
                        },
                        new
                        {
                            ID = 122,
                            Choice = "False",
                            IsCorrect = true,
                            QuestionId = 31
                        },
                        new
                        {
                            ID = 123,
                            Choice = "True",
                            IsCorrect = false,
                            QuestionId = 32
                        },
                        new
                        {
                            ID = 124,
                            Choice = "False",
                            IsCorrect = true,
                            QuestionId = 32
                        });
                });

            modelBuilder.Entity("API_University_Dissertation.Core.Data.Entities.QuestionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("QuestionTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Type = "Complexity"
                        },
                        new
                        {
                            Id = 2,
                            Type = "Sorting Algorithms"
                        },
                        new
                        {
                            Id = 3,
                            Type = "Searching Algorithms"
                        });
                });

            modelBuilder.Entity("API_University_Dissertation.Core.Data.Entities.QuizQuestions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionTypeId");

                    b.ToTable("QuizQuestions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Question = "The best case time complexity of bubble sort is _______?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Question = "What is the worst case time complexity of bubble sort?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 3,
                            Question = "What is the space complexity of bubble sort?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 4,
                            Question = "What is the best case time complexity of selection sort?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Question = "What is the worst case time complexity of selection sort?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            Question = "What is the space complexity of selection sort?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            Question = "What is the best case time complexity of insertion sort?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            Question = "What is the worst case time complexity of insertion sort?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            Question = "The space complexity of insertion sort is ________",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 10,
                            Question = "What is the best case time complexity of Merge sort?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 11,
                            Question = "What is the worst case time complexity of Merge sort?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 12,
                            Question = "What is the space complexity of Merge sort?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 13,
                            Question = "What is the best case time complexity of quick sort?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 14,
                            Question = "The worst case time complexity of quick sort is ______",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 15,
                            Question = "What is the space complexity of quick sort?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 16,
                            Question = "What is the best case time complexity of shell sort?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 17,
                            Question = "What is the worst case time complexity of shell sort?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 18,
                            Question = "What is the space complexity of shell sort?",
                            QuestionTypeId = 1
                        },
                        new
                        {
                            Id = 19,
                            Question = "The ascending motion of bubbles in fizzy water symbolises _________ in Bubble Sort?",
                            QuestionTypeId = 2
                        },
                        new
                        {
                            Id = 20,
                            Question = "What is the main limitation of Selection Sort?",
                            QuestionTypeId = 2
                        },
                        new
                        {
                            Id = 21,
                            Question = "Which enhanced version of Selection Sort addresses its limitations and improves performance?",
                            QuestionTypeId = 2
                        },
                        new
                        {
                            Id = 22,
                            Question = "What happens during the merging phase of Merge Sort?",
                            QuestionTypeId = 2
                        },
                        new
                        {
                            Id = 23,
                            Question = "Merge Sort employs the technique of ________ to sort elements?",
                            QuestionTypeId = 2
                        },
                        new
                        {
                            Id = 24,
                            Question = "Shell Sort is an extension of which sorting algorithm?",
                            QuestionTypeId = 2
                        },
                        new
                        {
                            Id = 25,
                            Question = "What is the main purpose of initiating comparisons between distant elements in Shell Sort?",
                            QuestionTypeId = 2
                        },
                        new
                        {
                            Id = 26,
                            Question = "Which searching algorithm works efficiently only on sorted arrays?",
                            QuestionTypeId = 3
                        },
                        new
                        {
                            Id = 27,
                            Question = "The data structure _______ is typically applied to Binary search.",
                            QuestionTypeId = 3
                        },
                        new
                        {
                            Id = 28,
                            Question = "Which searching algorithm is based on the principle of repeatedly dividing the search interval in half?",
                            QuestionTypeId = 3
                        },
                        new
                        {
                            Id = 29,
                            Question = "______ is the primary advantage of binary search over linear search?",
                            QuestionTypeId = 3
                        },
                        new
                        {
                            Id = 30,
                            Question = "In which situation might linear search outperform binary search?",
                            QuestionTypeId = 3
                        },
                        new
                        {
                            Id = 31,
                            Question = "True or False: Depth-First Search (DFS) is commonly used to find the shortest path between two nodes in a graph",
                            QuestionTypeId = 3
                        },
                        new
                        {
                            Id = 32,
                            Question = "True or False: Binary search is more efficient than linear search for unsorted arrays",
                            QuestionTypeId = 3
                        });
                });

            modelBuilder.Entity("API_University_Dissertation.Core.Data.Entities.UserProfile", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateOnly>("CreatedOn")
                        .HasColumnType("date");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProficiencyLevelId")
                        .HasColumnType("integer");

                    b.Property<int>("ProficiencyScore")
                        .HasColumnType("integer");

                    b.Property<string>("UserUUID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("API_University_Dissertation.Core.Data.Entities.UserQuizStatistics", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("QuizLength")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.Property<int>("UserProfileID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("UserProfileID");

                    b.ToTable("UserQuizStatistics");
                });

            modelBuilder.Entity("API_University_Dissertation.Core.Data.Entities.QuestionChoices", b =>
                {
                    b.HasOne("API_University_Dissertation.Core.Data.Entities.QuizQuestions", "QuizQuestion")
                        .WithMany("QuestionChoices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuizQuestion");
                });

            modelBuilder.Entity("API_University_Dissertation.Core.Data.Entities.QuizQuestions", b =>
                {
                    b.HasOne("API_University_Dissertation.Core.Data.Entities.QuestionType", "QuestionType")
                        .WithMany("QuizQuestions")
                        .HasForeignKey("QuestionTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QuestionType");
                });

            modelBuilder.Entity("API_University_Dissertation.Core.Data.Entities.UserQuizStatistics", b =>
                {
                    b.HasOne("API_University_Dissertation.Core.Data.Entities.UserProfile", "UserProfile")
                        .WithMany("UserQuizStatistics")
                        .HasForeignKey("UserProfileID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("API_University_Dissertation.Core.Data.Entities.QuestionType", b =>
                {
                    b.Navigation("QuizQuestions");
                });

            modelBuilder.Entity("API_University_Dissertation.Core.Data.Entities.QuizQuestions", b =>
                {
                    b.Navigation("QuestionChoices");
                });

            modelBuilder.Entity("API_University_Dissertation.Core.Data.Entities.UserProfile", b =>
                {
                    b.Navigation("UserQuizStatistics");
                });
#pragma warning restore 612, 618
        }
    }
}
